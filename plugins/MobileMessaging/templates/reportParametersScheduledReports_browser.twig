<script>

    $(function () {

        // Keys generated from https://web-push-codelab.glitch.me/
        var publicKey = 'BLnqbKTQD4nShW5LSA-x9yAY04V98VOYleR4RQK-QTG4m532MWuJYxSB2h6oJm8uICgiPZLoCdAdaK4_ZVlnYlg';
        //var privateKey = 'yYr_7puo-rpukgHwnqGOxhrJ4Ozny56xNFKRcBRJBmc'

        resetReportParametersFunctions ['browser'] = function (report) {
            report.formatbrowser = 'browser';

            Push.config({
                serviceWorker: '/notifications-sw.js'
            });

            // Prompts the user to enable browser notifications if they have not already
            Push.Permission.request(function() {
                console.log("Permission granted");
                if ('serviceWorker' in navigator && 'PushManager' in window) {
                    const registration = navigator.serviceWorker.register('/notifications-sw.js')
                        .then(function(reg) {
                            console.log("Registered the service worker");

                            // Most of the below code is from 
                            // https://stackoverflow.com/questions/39624676/uncaught-in-promise-domexception-subscription-failed-no-active-service-work
                            // which prevents JS errors which arise when we try to subscribe before the serviceworker
                            // has finished installing. If we used an implementation of urlBase64ToUint8Array which
                            // didn't depend on Window then we could move the subscribeForPushNotifications() call
                            // into the 'activate' callback of the serviceworker and get rid of this.
                            // var serviceWorker;
                            // if (reg.installing) {
                            //     serviceWorker = reg.installing;
                            // } else if (reg.waiting) {
                            //     serviceWorker = reg.waiting;
                            // } else if (reg.active) {
                            //     serviceWorker = reg.active;
                            // }
                            //
                            // // Wait for it to be ready then try to subscribe
                            // if (serviceWorker) {
                            //     if (serviceWorker.state == "activated") {
                            //         //If push subscription wasnt done yet have to do here
                            //         subscribeForPushNotifications(reg);
                            //     }
                            //     serviceWorker.addEventListener("statechange", function(e) {
                            //         if (e.target.state == "activated") {
                            //             // use pushManger for subscribing here.
                            //             subscribeForPushNotifications(reg);
                            //         }
                            //     });
                            // }
                            //
                        }).catch(function(err) {
                            console.log("Error with the service worker " + err);
                    });
                    
                }
            }, function() {
                console.log("Permisison denied");
            });
        };

        // subscribeForPushNotifications = function(reg)
        // {
        //     var subscribeOptions = {
        //         userVisibleOnly: true,
        //         applicationServerKey: urlBase64ToUint8Array(publicKey)
        //     };
        //     var subscription = reg.pushManager.subscribe(subscribeOptions)
        //         .then(function(success) {
        //             console.log("Subscribed");
        //             console.log(success);
        //         }).catch(function(error) {
        //             console.log("Error with subscription: " + error);
        //         });
        // };

        updateReportParametersFunctions['browser'] = function (report) {
            report.formatbrowser = 'browser';
        };

        getReportParametersFunctions['browser'] = function (report) {
            return {};
        };

        // From https://gist.github.com/malko/ff77f0af005f684c44639e4061fa8019
        function urlBase64ToUint8Array(base64String) {
            const padding = '='.repeat((4 - base64String.length % 4) % 4);
            const base64 = (base64String + padding)
                .replace(/\-/g, '+')
                .replace(/_/g, '/')
            ;
            const rawData = window.atob(base64);
            return Uint8Array.from([...rawData].map((char) => char.charCodeAt(0)));
        }
    });
</script>